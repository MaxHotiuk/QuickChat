@page "/login"
@using QuickChat.Shared.Entities
@using System.Net.Http
@using static System.Net.WebRequestMethods
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="login">Login:</label>
        <InputText id="login" @bind-Value="loginModel.login" />
    </div>
    <div>
        <label for="password">Password:</label>
        <InputText id="password" @bind-Value="loginModel.password" type="password" />
    </div>
    <button type="submit">Login</button>
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();
    private class LoginModel
    {
        public string? login { get; set; }
        public string? password { get; set; }
    }

    private async Task HandleLogin()
    {
        try
        {
            var httpClient = new HttpClient();
            if (string.IsNullOrEmpty(loginModel.login) || string.IsNullOrEmpty(loginModel.password))
            {
                // Handle null or empty login or password
                await JSRuntime.InvokeVoidAsync("alert", "Login and password cannot be empty.");
                return;
            }
            Dictionary<string, string> dataArray = new Dictionary<string, string>
            {
                { "login", loginModel.login},
                { "password", loginModel.password }
            };
            
            var response = await httpClient.PostAsJsonAsync("https://localhost:7121/api/auth/login", dataArray);
            if (response.IsSuccessStatusCode)
            {
                // Display success message to the user
                await JSRuntime.InvokeVoidAsync("alert", "Login successful!");
            }
            else
            {
                // Handle failed login
                await JSRuntime.InvokeVoidAsync("alert", response.ReasonPhrase);
            } 
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
        }
    }
}
